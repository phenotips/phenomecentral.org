<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>AllDataGadget</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1440510447000</creationDate>
  <parent>data.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1440510479000</date>
  <contentUpdateDate>1440510447000</contentUpdateDate>
  <version>1.1</version>
  <title>$services.localization.render('phenotips.homepage.sharedPatients.title')</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content/>
  <object>
    <name>PhenoTips.AllDataGadget</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>e3da6409-6e95-468d-b575-72c6dc068b3f</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity}}
#if (!$isGuest)
#set ($groupsAndSelf = [$xcontext.userReference.toString()])
#set ($groups = [])
#set ($toProcess = $collectionstool.queue)
#set ($discard = $toProcess.add($xcontext.userReference.toString()))
#foreach ($iteration in [0..1000])
  #if ($toProcess.empty)
    #break
  #end
  #set ($item = $toProcess.poll())
  #foreach ($group in $xwiki.wrapDocs($xwiki.rightsmanager.getAllGroupsNamesForMember($item)))
    #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
    #if (!$groupObj &amp;&amp; $group.documentReference.name.endsWith(' Managers'))
      #set ($group = $xwiki.getDocument($services.model.resolveDocument($stringtool.removeEnd($group.documentReference.name, ' Managers'), $group.documentReference.parent)))
      #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
    #end
    #if (!$groupObj &amp;&amp; $group.documentReference.name.endsWith(' Administrators'))
      #set ($group = $xwiki.getDocument($services.model.resolveDocument($stringtool.removeEnd($group.documentReference.name, ' Administrators'), $group.documentReference.parent)))
      #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
    #end
    #if ($groupObj &amp;&amp; !$groups.contains($group.documentReference.toString()))
      #set ($discard = $toProcess.add($group.documentReference.toString()))
      #set ($discard = $groups.add($escapetool.sql($group.documentReference.toString())))
      #set ($discard = $groupsAndSelf.add($escapetool.sql($group.documentReference.toString())))
    #end
  #end
#end
#set ($groupsString = "('${stringtool.join($groups, ""','"")}')")
#if ($groups.empty)
  #set ($query = ", BaseObject accessObj, StringProperty accessProp, BaseObject patientObj, LongProperty iid where patientObj.name = doc.fullName and doc.fullName &lt;&gt; 'PhenoTips.PatientTemplate' and patientObj.className = 'PhenoTips.PatientClass' and iid.id.id = patientObj.id and iid.id.name = 'identifier' and iid.value &gt;= 0 and accessObj.name = doc.fullName and accessProp.id.id = accessObj.id and accessObj.className = 'PhenoTips.CollaboratorClass' and accessProp.value in ('${stringtool.join($groupsAndSelf, ""','"")}') and not exists (from BaseObject ownerObj, StringProperty ownerProp where ownerObj.className = 'PhenoTips.OwnerClass' and ownerObj.name = doc.fullName and ownerProp.id.id = ownerObj.id and ownerProp.value = '$escapetool.sql($xcontext.userReference.toString())')")
#else
  #set ($query = ", BaseObject accessObj, StringProperty accessProp, BaseObject patientObj, LongProperty iid where patientObj.name = doc.fullName and doc.fullName &lt;&gt; 'PhenoTips.PatientTemplate' and patientObj.className = 'PhenoTips.PatientClass' and iid.id.id = patientObj.id and iid.id.name = 'identifier' and iid.value &gt;= 0 and accessObj.name = doc.fullName and accessProp.id.id = accessObj.id and ((accessObj.className = 'PhenoTips.OwnerClass' and accessProp.value in ('${stringtool.join($groups, ""','"")}')) or (accessObj.className = 'PhenoTips.CollaboratorClass' and accessProp.value in ('${stringtool.join($groupsAndSelf, ""','"")}'))) and not exists (from BaseObject ownerObj, StringProperty ownerProp where ownerObj.className = 'PhenoTips.OwnerClass' and ownerObj.name = doc.fullName and ownerProp.id.id = ownerObj.id and ownerProp.value = '$escapetool.sql($xcontext.userReference.toString())')")
#end
#set ($availableData = $services.query.hql($query).count())
#if ($availableData &gt; 0)
$xwiki.ssfx.use('uicomponents/suggest/suggestPicker.css', true)##
$xwiki.jsfx.use('uicomponents/suggest/suggestPicker.js', true)##
$xwiki.ssfx.use('uicomponents/widgets/userpicker/userPicker.css', true)##
$xwiki.jsfx.use('uicomponents/widgets/userpicker/userPicker.js', true)##
$xwiki.ssx.use('PhenoTips.DatabaseFilters')##
$xwiki.ssx.use('PhenoTips.Skin', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('PhenoTips.DBWebHomeSheet')##
$xwiki.ssx.use('PhenoTips.DBWebHomeSheet')##
$xwiki.ssx.use('PhenoTips.Widgets')##
$xwiki.jsx.use('PhenoTips.Widgets')##
$xwiki.jsx.use('XWiki.DateTimePicker')##
$xwiki.ssx.use('XWiki.DateTimePicker')##
#set ($config = $xwiki.getDocument('data.WebHome').getObject('PhenoTips.DBConfigurationClass'))
#set ($patientClassName = 'PhenoTips.PatientClass')
#if ($config)
#set ($columns = ['external_id', 'owner', 'doc.creationDate'])
#set ($columnsProperties = {})
#foreach ($column in $columns)
  #if ($foreach.index &lt;= 1)
     #set ($link = 'view')
     #set ($isFilterable = true)
  #else
     #set ($link = 'field')
     #set ($isFilterable = false)
  #end
  #set ($discard = $columnsProperties.put($column, { 'type' : 'text', 'link' : $link, 'size' : 7, 'filterable' : $isFilterable, 'sortable': true }))
#end
#set ($discard = $columns.add('_actions'))
#set ($discard = $columnsProperties.put('_actions', {'actions': ['edit', 'delete']}))
##
##
#set ($options = {
  'className'         : $patientClassName,
  'translationPrefix' : 'patient.livetable.',
  'rowCount'          : 25,
  'maxPages'          : 10,
  'selectedColumn'    : $config.getProperty('livetableSortColumn').value,
  'topFilters'        : "&lt;input type='hidden' name='owner/class' value='PhenoTips.OwnerClass'/&gt;",
  'defaultOrder'      : 'asc',
  'resultPage'        : 'PhenoTips.LiveTableResults'
})
#set ($filterFrom = ", BaseObject accessObj, StringProperty accessProp, LongProperty iid")
#set ($filterWhere = "and iid.id.id = obj.id and iid.id.name = 'identifier' and iid.value &gt;= 0 and accessObj.name = doc.fullName and accessProp.id.id = accessObj.id and (")
#if (!$groups.isEmpty())
  #set ($filterWhere = "${filterWhere}(accessObj.className = 'PhenoTips.OwnerClass' and accessProp.value in ('${stringtool.join($groups, ""','"")}')) or ")
#end
#set ($discard = $groups.add($services.model.serialize($xcontext.userReference, 'default')))
#set ($filterWhere = "${filterWhere}(accessObj.className = 'PhenoTips.CollaboratorClass' and accessProp.value in ('${stringtool.join($groups, ""','"")}'))) and not exists (from BaseObject ownerObj, StringProperty ownerProp where ownerObj.className = 'PhenoTips.OwnerClass' and ownerObj.name = doc.fullName and ownerProp.id.id = ownerObj.id and ownerProp.value = '$escapetool.sql($xcontext.userReference.toString())')")
#set ($discard = $options.put('extraParams', "&amp;filterFrom=${escapetool.url($filterFrom)}&amp;filterWhere=${escapetool.url($filterWhere)}"))
#if ("$!config.getProperty('livetableRows').value" != '' &amp;&amp; $config.getProperty('livetableRows').value &gt; 0)
  #set ($options.rowCount = $config.getProperty('livetableRows').value)
#end
#livetable('sharedpatients' $columns $columnsProperties $options)
$xwiki.ssfx.use('js/xwiki/table/livetable.css', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')", 'forceSkinAction' : true})##
#else
{{warning}}**$services.localization.render('phenotips.configurationMissing')**{{/warning}}
#end
#else
{{info}}$services.localization.render('phenotips.homepage.sharedPatients.noData'){{/info}}
#end
#else
{{info}}$services.localization.render('phenotips.homepage.sharedPatients.noData'){{/info}}
#end
{{/velocity}}</content>
    </property>
    <property>
      <extensionPointId>org.phenotips.homepage.dashboard</extensionPointId>
    </property>
    <property>
      <name>org.phenotips.homepage.dashboard.sharedPatients</name>
    </property>
    <property>
      <parameters>title=$services.localization.render('phenotips.homepage.sharedPatients.title') [[{{icon name="folder-open"/}}&gt;&gt;data.AllData||class="extra" title="$services.localization.render('phenotips.homepage.sharedPatients.browse.tooltip')"]]
column=1
priority=50
enabled=true</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
